{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","reducer/itemReducer.js","reducer/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","setItemsLoading","type","connect","state","item","getItems","dispatch","axios","get","then","res","payload","data","deleteItem","id","delete","addItem","name","post","useEffect","console","log","Container","Button","style","margin","prompt","ListGroup","TransitionGroup","items","map","_id","CSSTransition","key","timeout","class","ListGroupItem","size","marginRight","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12045765.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst AppNavbar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">\r\n                GitHub\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import { GET_ITEMS, ADD_ITEMS, DELETE_ITEMS, ITEMS_LOADING } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const getItems = () => (dispatch) => {\r\n  dispatch(setItemsLoading);\r\n  axios.get(\"/api/items\").then((res) => {\r\n    return dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data,\r\n    });\r\n  });\r\n};\r\nexport const deleteItem = (id) => (dispatch) => {\r\n  //can cai thien lai\r\n  axios.delete(`/api/items/${id}`).then((res) => {\r\n    return dispatch({\r\n      type: DELETE_ITEMS,\r\n      payload: id,\r\n    });\r\n  });\r\n};\r\nexport const addItem = (name) => (dispatch) => {\r\n  axios.post(\"/api/items\", { name }).then((res) => {\r\n    return dispatch({\r\n      type: ADD_ITEMS,\r\n      payload: res.data,\r\n    });\r\n  });\r\n};\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING,\r\n  };\r\n};\r\n","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEMS = \"ADD_ITEMS\";\r\nexport const DELETE_ITEMS = \"DELETE_ITEMS\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItems, deleteItem, addItem } from \"../actions/itemActions\";\r\nconst ShoppingList = (props) => {\r\n  useEffect(() => {\r\n    props.getItems();\r\n    console.log(\"1111111111111111111\");\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Button\r\n        color=\"dark\"\r\n        style={{ margin: \"2rem\" }}\r\n        onClick={() => {\r\n          let name = prompt(\"Enter Name\");\r\n          if (name) {\r\n            props.addItem(name);\r\n          }\r\n        }}\r\n      >\r\n        Add Item\r\n      </Button>\r\n      <ListGroup>\r\n        <TransitionGroup className=\"shopping-list\">\r\n          {props.item.items.map(({ _id, name }) => {\r\n            return (\r\n              <CSSTransition key={_id} timeout={500} class=\"fade\">\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className=\"remove-btn\"\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    style={{ marginRight: \"2rem\" }}\r\n                    onClick={() => {\r\n                      props.deleteItem(_id);\r\n                    }}\r\n                  >\r\n                    X\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </ListGroup>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = function (state) {\r\n  return { item: state.item };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem, addItem })(\r\n  ShoppingList\r\n);\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  GET_ITEMS,\r\n  DELETE_ITEMS,\r\n  ADD_ITEMS,\r\n  ITEMS_LOADING,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false,\r\n};\r\n//reducer\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return { ...state, items: action.payload, loading: false };\r\n    case DELETE_ITEMS:\r\n      console.log(\"sdhfbs1\");\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item._id !== action.payload),\r\n      };\r\n    case ADD_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.payload],\r\n      };\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    default:\r\n      console.log(\"sdhfbs2\");\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport itemReducer from \"./itemReducer\";\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\n\nimport AppNavbar from \"./components/AppNavbar\";\nimport ShoppingList from \"./components/ShoppingList\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <ShoppingList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}